$version Generated by VerilatedVcd $end
$timescale 1s $end
 $scope module TOP $end
  $var wire 1 ; clk $end
  $var wire 1 < rst_n $end
  $var wire 8 = data_in[0] [7:0] $end
  $var wire 8 > data_in[1] [7:0] $end
  $var wire 32 ? acc_out[0] [31:0] $end
  $var wire 32 @ acc_out[1] [31:0] $end
  $var wire 2 A ctrl [1:0] $end
  $scope module mmu $end
   $var wire 32 D SIZE [31:0] $end
   $var wire 32 E DATA_WIDTH [31:0] $end
   $var wire 32 F ACC_WIDTH [31:0] $end
   $var wire 1 ; clk $end
   $var wire 1 < rst_n $end
   $var wire 8 = data_in[0] [7:0] $end
   $var wire 8 > data_in[1] [7:0] $end
   $var wire 32 ? acc_out[0] [31:0] $end
   $var wire 32 @ acc_out[1] [31:0] $end
   $var wire 2 A ctrl [1:0] $end
   $var wire 8 # mac_data_out[0][0] [7:0] $end
   $var wire 8 $ mac_data_out[0][1] [7:0] $end
   $var wire 8 % mac_data_out[1][0] [7:0] $end
   $var wire 8 & mac_data_out[1][1] [7:0] $end
   $var wire 32 ' mac_acc_out[0][0] [31:0] $end
   $var wire 32 ( mac_acc_out[0][1] [31:0] $end
   $var wire 32 ) mac_acc_out[1][0] [31:0] $end
   $var wire 32 * mac_acc_out[1][1] [31:0] $end
   $scope module genblk1[0] $end
    $scope module genblk1[0] $end
     $scope module mac_unit $end
      $var wire 32 E DATA_WIDTH [31:0] $end
      $var wire 32 F ACC_WIDTH [31:0] $end
      $var wire 1 ; clk $end
      $var wire 1 < rst_n $end
      $var wire 8 B data_in [7:0] $end
      $var wire 8 + data_out [7:0] $end
      $var wire 32 G acc_in [31:0] $end
      $var wire 32 , acc_out [31:0] $end
      $var wire 2 A ctrl [1:0] $end
      $var wire 8 - weight [7:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[1] $end
     $scope module mac_unit $end
      $var wire 32 E DATA_WIDTH [31:0] $end
      $var wire 32 F ACC_WIDTH [31:0] $end
      $var wire 1 ; clk $end
      $var wire 1 < rst_n $end
      $var wire 8 . data_in [7:0] $end
      $var wire 8 / data_out [7:0] $end
      $var wire 32 G acc_in [31:0] $end
      $var wire 32 0 acc_out [31:0] $end
      $var wire 2 A ctrl [1:0] $end
      $var wire 8 1 weight [7:0] $end
     $upscope $end
    $upscope $end
   $upscope $end
   $scope module genblk1[1] $end
    $scope module genblk1[0] $end
     $scope module mac_unit $end
      $var wire 32 E DATA_WIDTH [31:0] $end
      $var wire 32 F ACC_WIDTH [31:0] $end
      $var wire 1 ; clk $end
      $var wire 1 < rst_n $end
      $var wire 8 C data_in [7:0] $end
      $var wire 8 2 data_out [7:0] $end
      $var wire 32 3 acc_in [31:0] $end
      $var wire 32 4 acc_out [31:0] $end
      $var wire 2 A ctrl [1:0] $end
      $var wire 8 5 weight [7:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[1] $end
     $scope module mac_unit $end
      $var wire 32 E DATA_WIDTH [31:0] $end
      $var wire 32 F ACC_WIDTH [31:0] $end
      $var wire 1 ; clk $end
      $var wire 1 < rst_n $end
      $var wire 8 6 data_in [7:0] $end
      $var wire 8 7 data_out [7:0] $end
      $var wire 32 8 acc_in [31:0] $end
      $var wire 32 9 acc_out [31:0] $end
      $var wire 2 A ctrl [1:0] $end
      $var wire 8 : weight [7:0] $end
     $upscope $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#10
b00000000 #
b00000000 $
b00000000 %
b00000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000 +
b00000000000000000000000000000000 ,
b00000000 -
b00000000 .
b00000000 /
b00000000000000000000000000000000 0
b00000000 1
b00000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000 5
b00000000 6
b00000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000 :
0;
0<
b00000000 =
b00000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00 A
b00000000 B
b00000000 C
b00000000000000000000000000000010 D
b00000000000000000000000000001000 E
b00000000000000000000000000100000 F
b00000000000000000000000000000000 G
#20
1<
#30
#40
1;
#50
0;
b00000010 =
b00000100 >
b10 A
b00000010 B
b00000100 C
#60
b00000010 #
b00000100 %
b00000010 +
b00000010 -
b00000010 .
b00000100 2
b00000100 5
b00000100 6
1;
#70
0;
b00000001 =
b00000011 >
b00000001 B
b00000011 C
#80
b00000001 #
b00000010 $
b00000011 %
b00000100 &
b00000001 +
b00000001 -
b00000001 .
b00000010 /
b00000010 1
b00000011 2
b00000011 5
b00000011 6
b00000100 7
b00000100 :
1;
#90
0;
b00 A
#100
b00000000 #
b00000000 $
b00000000 %
b00000000 &
b00000000 +
b00000000 .
b00000000 /
b00000000 2
b00000000 6
b00000000 7
1;
#110
0;
b00000000 =
b00000101 >
b01 A
b00000000 B
b00000101 C
#120
b00000101 %
b00000000000000000000000000001111 )
b00000101 2
b00000000000000000000000000001111 4
b00000101 6
1;
b00000000000000000000000000001111 ?
#130
0;
#140
b00000101 &
b00000000000000000000000000010100 *
b00000101 7
b00000000000000000000000000010100 9
1;
b00000000000000000000000000010100 @
#150
0;
#160
1;
#170
0;
#180
1;
#190
0;
#200
1;
#210
0;
#220
1;
#230
0;
#240
1;
#250
0;
#260
1;
#270
0;
#280
1;
#290
0;
#300
1;
#310
0;
#320
1;
#330
0;
#340
1;
#350
0;
#360
1;
#370
0;
#380
1;
#390
0;
#400
1;
#410
0;
#420
1;
#430
0;
#440
1;
#450
0;
#460
1;
#470
0;
#480
1;
#490
0;
#500
1;
